[
  {
    "Id": "1322849",
    "ThreadId": "572280",
    "Html": "Hello<br />\n<br />\nI've been searching a while now for a good looking chart visualization solution for my project and I finally found it so first of all a big thank you for creating and sharing this.<br />\n<br />\nI've been playing around a little with the charts and I really love them. Very smooth and beautiful. There is 1 thing I need a little more information about and that is how I can add ChartSeries at runtime.<br />\n<br />\nEDIT: I managed to add bars on runtime but there is some bug I can't seem to figure out. Let's start with an image:<br />\n<br />\n<img src=\"http://i1054.photobucket.com/albums/s485/KFredje/Naamloos_zps669f9f8a.jpg\" alt=\"Image\" /><br />\n<br />\nAs you can see in the image, the titles on the axis are correct and scale when I scale the window. The problem here are the bars. The bars seem to have a fixed width and don't want to fit on the screen. The way I did this is as follow:<br />\n<br />\nIn XAML I placed the control like this:<br />\n<pre><code>&lt;chart:StackedColumnChart ChartTitle=&quot;Total&quot;\n                              ChartSubTitle=&quot;(800)&quot;\n                              Series=&quot;{Binding Bars}&quot;&gt;\n&lt;/chart:StackedColumnChart&gt;\n</code></pre>\n\nIn my code behind I added the Bars like this:<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing De.TorstenMandelkow.MetroChart;\nusing System.Collections.ObjectModel;\n\nnamespace AutoShop\n{\nclass OccupationChartGroupViewModel\n{\n    public OccupationChartGroupViewModel()\n    {\n        List&lt;Tuple&lt;string, int, double&gt;&gt; reqProdHoursPerWeek = DbServiceSegmentRequirement.GetProdSegReq();\n        List&lt;Tuple&lt;string, int, double&gt;&gt; reqPlanHoursPerWeek = DbServiceSegmentRequirement.GetPlanSegReq();\n        List&lt;Tuple&lt;string, int, double&gt;&gt; reqRepairHoursPerWeek = DbServiceSegmentRequirement.GetRepairSegReq();\n\n        List&lt;Tuple&lt;string, int, double&gt;&gt; reqHoursPerWeek = new List&lt;Tuple&lt;string, int, double&gt;&gt;();\n        reqHoursPerWeek.AddRange(reqProdHoursPerWeek);\n        reqHoursPerWeek.AddRange(reqPlanHoursPerWeek);\n        reqHoursPerWeek.AddRange(reqRepairHoursPerWeek);\n\n        reqHoursPerWeek.Sort();\n\n        switch (reqHoursPerWeek[0].Item2.ToString())\n        {\n            case &quot;0&quot;:\n                if (reqHoursPerWeek[1].Item2.ToString() != &quot;1&quot;)\n                    reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 1, 0.0));\n                else\n                    if (reqHoursPerWeek[1].Item1 != reqHoursPerWeek[0].Item1)\n                        reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 1, 0.0));\n                break;\n\n            case &quot;1&quot;:\n                reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 0, 0.0));\n                if (reqHoursPerWeek[1].Item2.ToString() != &quot;2&quot;)\n                    reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 2, 0.0));\n                else\n                    if (reqHoursPerWeek[1].Item1 != reqHoursPerWeek[0].Item1)\n                        reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 2, 0.0));\n                break;\n\n            case &quot;2&quot;:\n                reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 0, 0.0));\n                reqHoursPerWeek.Add(new Tuple&lt;string, int, double&gt;(reqHoursPerWeek[0].Item1, 1, 0.0));\n                break;\n\n            default: break;\n        }\n\n        reqHoursPerWeek.Sort();\n\n        Bars = new ObservableCollection&lt;De.TorstenMandelkow.MetroChart.ChartSeries&gt;();\n\n        ObservableCollection&lt;TestClass&gt; blocks = new ObservableCollection&lt;TestClass&gt;();\n\n        foreach (Tuple&lt;string, int, double&gt; reqHours in reqHoursPerWeek)\n        {\n            string group = reqHours.Item2.ToString() == &quot;2&quot; ? &quot;Order1&quot; : reqHours.Item2.ToString() == &quot;1&quot; ? &quot;Order2&quot; : reqHours.Item2.ToString() == &quot;0&quot; ? &quot;Order3&quot; : &quot;Unknown&quot;;\n\n            blocks.Add(new TestClass() { Category = group, Number = reqHours.Item3 });\n\n            if (reqHoursPerWeek.IndexOf(reqHours) + 1 &lt; reqHoursPerWeek.Count)\n            {\n                if (reqHours.Item1 != reqHoursPerWeek[reqHoursPerWeek.IndexOf(reqHours) + 1].Item1)\n                {\n                    ChartSeries chartSerie = new ChartSeries();\n                    chartSerie.SeriesTitle = reqHours.Item1;\n                    chartSerie.DisplayMember = &quot;Category&quot;;\n                    chartSerie.ValueMember = &quot;Number&quot;;\n                    chartSerie.ItemsSource = blocks;\n                    Bars.Add(chartSerie);\n\n                    blocks = new ObservableCollection&lt;TestClass&gt;();\n                }\n            }\n            else\n            {\n                ChartSeries chartSerie = new ChartSeries();\n                chartSerie.SeriesTitle = reqHours.Item1;\n                chartSerie.DisplayMember = &quot;Category&quot;;\n                chartSerie.ValueMember = &quot;Number&quot;;\n                chartSerie.ItemsSource = blocks;\n                Bars.Add(chartSerie);\n            }\n        }\n    }\n\n    public ObservableCollection&lt;ChartSeries&gt; Bars { get; private set; }\n}\n\n// class which represent a data point in the chart\npublic class TestClass\n{\n    public string Category { get; set; }\n\n    public double Number { get; set; }\n}\n}\n</code></pre>\n\nLastly, the error I get on design time in the XAML viewer is this one:<br />\n<blockquote>\n<strong>NullReferenceException: Object reference not set to an instance of an object.</strong><br />\n<br />\n<strong>Stacktrace</strong><br />\nat De.TorstenMandelkow.MetroChart.ChartBase.UpdateDataContextOfSeries()<br />\nat De.TorstenMandelkow.MetroChart.ChartBase.InternalDataContextChanged()<br />\nat De.TorstenMandelkow.MetroChart.ChartBase.DataContextWatcher_Changed(DependencyObject sender, DependencyPropertyChangedEventArgs args)<br />\nat System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)<br />\nat System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)<br />\nat System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)<br />\nat System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry&amp; newEntry, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType)<br />\nat System.Windows.DependencyObject.InvalidateProperty(DependencyProperty dp, Boolean preserveCurrentValue)<br />\nat System.Windows.Data.BindingExpressionBase.Invalidate(Boolean isASubPropertyChange)<br />\nat System.Windows.Data.BindingExpression.TransferValue(Object newValue, Boolean isASubPropertyChange)<br />\nat System.Windows.Data.BindingExpression.Activate(Object item)<br />\nat System.Windows.Data.BindingExpression.AttachToContext(AttachAttempt attempt)<br />\nat System.Windows.Data.BindingExpression.MS.Internal.Data.IDataBindEngineClient.AttachToContext(Boolean lastChance)<br />\nat MS.Internal.Data.DataBindEngine.Task.Run(Boolean lastChance)<br />\nat MS.Internal.Data.DataBindEngine.Run(Object arg)<br />\nat MS.Internal.Data.DataBindEngine.OnLayoutUpdated(Object sender, EventArgs e)<br />\nat System.Windows.ContextLayoutManager.fireLayoutUpdateEvent()<br />\nat System.Windows.ContextLayoutManager.UpdateLayout()<br />\nat System.Windows.UIElement.UpdateLayout()<br />\n<br />\n<strong>InnerException: None</strong><br />\n</blockquote>\n",
    "PostedDate": "2014-11-17T00:48:08.097-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1347374",
    "ThreadId": "572280",
    "Html": "Anyone?<br />\n",
    "PostedDate": "2015-01-29T21:13:12.267-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1362877",
    "ThreadId": "572280",
    "Html": "I had the same error, you can't have empty series binding<br />\n<br />\n<br />\nTry this in XAML: <br />\n<pre><code>&lt;chart:StackedColumnChart Name=&quot;myChart&quot; ChartTitle=&quot;Total&quot;\n                              ChartSubTitle=&quot;(800)&quot;&gt;\n  &lt;chart:StackedColumnChart .Series&gt;\n                    &lt;chart:ChartSeries/&gt; \n                &lt;/chart:StackedColumnChart&gt;\n&lt;/chart:StackedColumnChart&gt;\n</code></pre>\n\nIn codebehind CSS:<br />\n<pre><code>// Clear all current series (including the dummy 1st one the first time)\nmyChart.Series.Clear();\n// Create and configure series\n ChartSeries series = new ChartSeries();\n                series.SeriesTitle = &quot;Title&quot;;\n                series.DisplayMember = &quot;someVar&quot;;\n                series.ValueMember = &quot;someVar&quot;;\n// Important: if you want the graph to update when adding, removing or chaning series, set ItemsSource to null first (this will force it to update)\nseries.ItemsSource = null;\n\n// Then add to chart and set to actual data source\nmyChart.Series.Add(series);\n ObservableCollection&lt;ChartData&gt; myData = new ObservableCollection&lt;ChartData&gt;();\nseries.ItemsSource = myData;</code></pre>\n\nTo restate: <strong>Important: if you want the graph to update when adding, removing or changing series dynamically, set ItemsSource to null first (this will force it to update)</strong><br />\n",
    "PostedDate": "2015-03-12T09:48:26.843-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1363292",
    "ThreadId": "572280",
    "Html": "Thanks for the reply. It's working like a charm now.<br />\n",
    "PostedDate": "2015-03-13T15:21:24.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1427027",
    "ThreadId": "572280",
    "Html": "This worked for you Krowi? I'm having the same issue and I can't get it to work, because this example has nothing to do with MVVM anymore... I'm really desperate by now and would appreciate any help or hint how to get this to work.<br />\n",
    "PostedDate": "2015-05-22T00:57:34.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1427115",
    "ThreadId": "572280",
    "Html": "In my xaml (view) code I have the following:<br />\n<pre><code>&lt;chart:StackedColumnChart Name=&quot;chart&quot; ChartTitle=&quot;My Title&quot; ChartSubTitle=&quot;{Binding ChartSubTitle}&quot; SeriesSource=&quot;{Binding Path=Series}&quot;&gt;\n    &lt;chart:StackedColumnChart.SeriesTemplate&gt;\n        &lt;DataTemplate&gt;\n            &lt;chart:ChartSeries SeriesTitle=&quot;{Binding Path=DisplayName}&quot; DisplayMember=&quot;Category&quot; ValueMember=&quot;Value&quot; ItemsSource=&quot;{Binding Path=Items}&quot; /&gt;\n        &lt;/DataTemplate&gt;\n    &lt;/chart:StackedColumnChart.SeriesTemplate&gt;\n&lt;/chart:StackedColumnChart&gt;\n</code></pre>\n\n<strong>SeriesSource=&quot;{Binding Path=Series}&quot;</strong> is the part with the data.\r<br />\n<br />\nIn my view model I have a property <br />\n<pre><code>public ObservableCollection&lt;SeriesData&gt; Series\n    {\n        get { return _series; }\n        private set\n        {\n            _series = value;\n            NotifyPropertyChanged();\n        }\n    }\n</code></pre>\n\nThe class SeriesData has the following properties (this is this part in xaml: SeriesTitle=&quot;{Binding Path=DisplayName}&quot; and ItemsSource=&quot;{Binding Path=Items}&quot;):<br />\n<pre><code>public string DisplayName { get; set; }\npublic ObservableCollection&lt;GraphData&gt; Items { get; set; }\n</code></pre>\n\nThe GraphData has these properties (this is this part in xaml: DisplayMember=&quot;Category&quot; ValueMember=&quot;Value&quot;):<br />\n<pre><code>public string Category { get; set; }\npublic double Value { get; set; }\n</code></pre>\n\nSo to add data to it you give a name to a category. This is the name of the columns in a bar chart. The value is obvious.\r<br />\n<br />\nLittle example:<br />\n<pre><code>var tempSeries = new ObservableCollection&lt;SeriesData&gt;();\nvar weekData = new ObservableCollection&lt;GraphData&gt;();\nweekData.Add(new GraphData\n{\n    Category = &quot;Column Name&quot;,\n    Value = 10\n});\ntempSeries.Add(new SeriesData { DisplayName = week, Items = weekData });\nSeries = tempSeries;\n</code></pre>\n\nThe reason for the tempSeries is because some lag occurred when adding a lot of data to 1 graph. The reason for this I think is that the UI was constantly reloading cause the Series property was updated.\r<br />\n<br />\nI hope the above helps. There should also be an example in the source somewhere but forgot where exactly.<br />\n",
    "PostedDate": "2015-05-22T08:29:52.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1427603",
    "ThreadId": "572280",
    "Html": "Hi Krowi, \r<br />\n<br />\nthanks for your reply. I'm relatively new to the whole wpf universe. I understand what you are doing with the observable collections, the classes and also the DataBinding. Unfortunately I have no experience with Interfaces and don't know how to exactly implement the INotifyPropertyChanged one. Could you please show me, how you did it, so I can adopt it for my usage? I really would appreciate that.<br />\n",
    "PostedDate": "2015-05-26T03:39:47.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1427703",
    "ThreadId": "572280",
    "Html": "@kawsidw\r<br />\n<br />\nHere's an implementation for INotifyPropertyChanged:<br />\n<pre><code>public class BaseModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        // Create the OnPropertyChanged method to raise the event \n        protected void OnPropertyChanged(string name)\n        {\n            PropertyChangedEventHandler handler = PropertyChanged;\n            if (handler != null)\n            {\n                handler(this, new PropertyChangedEventArgs(name));\n            }\n        }\n    }</code></pre>\n\nI suggest you look into MVVM frameworks such as <a href=\"http://mvvmlight.codeplex.com/\" rel=\"nofollow\">MVVMLight</a> or <a href=\"https://github.com/Caliburn-Micro\" rel=\"nofollow\">Caliburn Micro</a>. If you're just beginning MVVM Light may be the way to go but both are good to learn from.<br />\n",
    "PostedDate": "2015-05-26T15:22:46.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1428213",
    "ThreadId": "572280",
    "Html": "Thanks everyone, it works now :)\r<br />\n<br />\nKrowi, did you manage to solve you initial Problem with the bar sizes? I face the same problem now XD. \r<br />\nIf I find a way, I'll post it here.<br />\n",
    "PostedDate": "2015-06-01T05:53:24.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1451310",
    "ThreadId": "572280",
    "Html": "Hi all,\r<br />\nI am having problem showing more than one series in any Column chart. I first to tried with hardcoded xaml series and then tried the approach above for an automated series addition. Both ways ended up with the same result. I try to make a small example with two series but I get the following result:\r<br />\n<br />\n<img src=\"https://dl.dropboxusercontent.com/u/30573290/clusteredChart.PNG\" alt=\"Image\" />\r<br />\n<br />\nOnly one of my two series is shown, although space is allocated for the second one. \r<br />\nMy console output shows the following:<br />\n<pre><code>System.Windows.Data Error: 40 : BindingExpression path error: 'ChartSubTitle' property not found on 'object' ''TotalChart' (Name='')'. BindingExpression:Path=ChartSubTitle; DataItem='TotalChart' (Name=''); target element is 'ClusteredColumnChart' (Name='chart'); target property is 'ChartSubTitle' (type 'String')\nSystem.Windows.Data Error: 40 : BindingExpression path error: 'ChartLegendItemStyle' property not found on 'object' ''ContentPresenter' (Name='')'. BindingExpression:Path=ChartLegendItemStyle; DataItem='ContentPresenter' (Name=''); target element is 'ChartLegendItem' (Name=''); target property is 'Style' (type 'Style')\nSystem.Windows.Data Error: 40 : BindingExpression path error: 'ChartLegendItemStyle' property not found on 'object' ''ContentPresenter' (Name='')'. BindingExpression:Path=ChartLegendItemStyle; DataItem='ContentPresenter' (Name=''); target element is 'ChartLegendItem' (Name=''); target property is 'Style' (type 'Style')</code></pre>\n\nThe code I use is the following:<br />\n<pre><code>&lt;Window x:Class=&quot;FinanceHelper.TotalChart&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:FinanceHelper&quot;\n        xmlns:chart=&quot;clr-namespace:De.TorstenMandelkow.MetroChart;assembly=De.TorstenMandelkow.MetroChart&quot;\n        mc:Ignorable=&quot;d&quot;\n        Title=&quot;TotalChart&quot; Height=&quot;500&quot; Width=&quot;900&quot;&gt;\n    &lt;Grid&gt;\n        &lt;Grid.ColumnDefinitions&gt;\n            &lt;ColumnDefinition Width=&quot;*&quot; /&gt;\n            &lt;ColumnDefinition Width=&quot;*&quot; /&gt;\n        &lt;/Grid.ColumnDefinitions&gt;\n        &lt;chart:ClusteredColumnChart Name=&quot;chart&quot; ChartTitle=&quot;My Title&quot; ChartSubTitle=&quot;{Binding ChartSubTitle}&quot; SeriesSource=&quot;{Binding Path=Series}&quot;&gt;\n            &lt;chart:ClusteredColumnChart.SeriesTemplate&gt;\n                &lt;DataTemplate&gt;\n                    &lt;chart:ChartSeries DisplayMember=&quot;month&quot; ValueMember=&quot;balance&quot; ItemsSource=&quot;{Binding Path=MonthBalanceCollection}&quot; /&gt;\n                &lt;/DataTemplate&gt;\n            &lt;/chart:ClusteredColumnChart.SeriesTemplate&gt;\n        &lt;/chart:ClusteredColumnChart&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;</code></pre>\n\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Shapes;\n\nnamespace FinanceHelper\n{\n    /// &lt;summary&gt;\n    /// Interaction logic for TotalChart.xaml\n    /// &lt;/summary&gt;\n    public partial class TotalChart : Window\n    {\n        public ObservableCollection&lt;AccountSeriesData&gt; Series { get; set; }\n\n        public TotalChart(FinanceModel model)\n        {\n            InitializeComponent();\n            this.DataContext = this;\n\n            this.Series = this.calculateChartSeries();\n                        \n        }\n\n        private ObservableCollection&lt;AccountSeriesData&gt; calculateChartSeries()\n        {\n            var tempSeries = new ObservableCollection&lt;AccountSeriesData&gt;();\n\n            var savings = new AccountSeriesData();\n            savings.AccountName = &quot;Savings&quot;;\n            savings.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Jun&quot;, balance = 4000 });\n            savings.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Jul&quot;, balance = 5000 });\n            savings.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Aug&quot;, balance = 5500 });\n            savings.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Sep&quot;, balance = 6000 });\n\n            var normal = new AccountSeriesData();\n            normal.AccountName = &quot;Normal&quot;;\n            normal.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Jun&quot;, balance = 1000 });\n            normal.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Jul&quot;, balance = 2000 });\n            normal.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Aug&quot;, balance = 3500 });\n            normal.MonthBalanceCollection.Add(new MonthChartDetails() { month = &quot;Sep&quot;, balance = 4000 });\n\n            tempSeries.Add(savings);\n            tempSeries.Add(normal);\n\n            return tempSeries;\n        }\n    }\n\n    public class AccountSeriesData\n    {\n        public string AccountName { get; set; }\n        public ObservableCollection&lt;MonthChartDetails&gt; MonthBalanceCollection { get; set; }\n        public AccountSeriesData()\n        {\n            MonthBalanceCollection = new ObservableCollection&lt;MonthChartDetails&gt;();\n        }\n    }\n\n    public class MonthChartDetails\n    {\n        public string month { get; set; }\n        public float balance { get; set; }\n    }\n}</code></pre>\n\nI have tried many different options but I always end up at the same spot. I tried with Pie chart and that displays different pies for each series. But ofc pie chart is not what I want for my data.\r<br />\nI am also wondering because it seems that some properties of the charts (e.g. SeriesTitle) are not recognized and I have to remove them from my xaml. It feels like the added package for the charts is not completely recognized. I use .NET Framework 4.5.2 MetroChart version 1.0.0.0.\r<br />\n<br />\nAny help is welcome!<br />\n",
    "PostedDate": "2015-11-08T02:29:36.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]